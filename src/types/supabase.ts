/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/lists_on_users": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.lists_on_users.user_id"];
          list_id?: parameters["rowFilter.lists_on_users.list_id"];
          created_at?: parameters["rowFilter.lists_on_users.created_at"];
          updated_at?: parameters["rowFilter.lists_on_users.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["lists_on_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lists_on_users */
          lists_on_users?: definitions["lists_on_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.lists_on_users.user_id"];
          list_id?: parameters["rowFilter.lists_on_users.list_id"];
          created_at?: parameters["rowFilter.lists_on_users.created_at"];
          updated_at?: parameters["rowFilter.lists_on_users.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.lists_on_users.user_id"];
          list_id?: parameters["rowFilter.lists_on_users.list_id"];
          created_at?: parameters["rowFilter.lists_on_users.created_at"];
          updated_at?: parameters["rowFilter.lists_on_users.updated_at"];
        };
        body: {
          /** lists_on_users */
          lists_on_users?: definitions["lists_on_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tasks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          summary?: parameters["rowFilter.tasks.summary"];
          started?: parameters["rowFilter.tasks.started"];
          complete?: parameters["rowFilter.tasks.complete"];
          created_at?: parameters["rowFilter.tasks.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tasks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          summary?: parameters["rowFilter.tasks.summary"];
          started?: parameters["rowFilter.tasks.started"];
          complete?: parameters["rowFilter.tasks.complete"];
          created_at?: parameters["rowFilter.tasks.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tasks.id"];
          summary?: parameters["rowFilter.tasks.summary"];
          started?: parameters["rowFilter.tasks.started"];
          complete?: parameters["rowFilter.tasks.complete"];
          created_at?: parameters["rowFilter.tasks.created_at"];
        };
        body: {
          /** tasks */
          tasks?: definitions["tasks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tasks_on_users": {
    get: {
      parameters: {
        query: {
          task_id?: parameters["rowFilter.tasks_on_users.task_id"];
          created_at?: parameters["rowFilter.tasks_on_users.created_at"];
          user_id?: parameters["rowFilter.tasks_on_users.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tasks_on_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tasks_on_users */
          tasks_on_users?: definitions["tasks_on_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          task_id?: parameters["rowFilter.tasks_on_users.task_id"];
          created_at?: parameters["rowFilter.tasks_on_users.created_at"];
          user_id?: parameters["rowFilter.tasks_on_users.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          task_id?: parameters["rowFilter.tasks_on_users.task_id"];
          created_at?: parameters["rowFilter.tasks_on_users.created_at"];
          user_id?: parameters["rowFilter.tasks_on_users.user_id"];
        };
        body: {
          /** tasks_on_users */
          tasks_on_users?: definitions["tasks_on_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/subtasks": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subtasks.id"];
          task_id?: parameters["rowFilter.subtasks.task_id"];
          created_at?: parameters["rowFilter.subtasks.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["subtasks"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** subtasks */
          subtasks?: definitions["subtasks"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subtasks.id"];
          task_id?: parameters["rowFilter.subtasks.task_id"];
          created_at?: parameters["rowFilter.subtasks.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.subtasks.id"];
          task_id?: parameters["rowFilter.subtasks.task_id"];
          created_at?: parameters["rowFilter.subtasks.created_at"];
        };
        body: {
          /** subtasks */
          subtasks?: definitions["subtasks"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/lists": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lists.id"];
          title?: parameters["rowFilter.lists.title"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["lists"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lists */
          lists?: definitions["lists"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lists.id"];
          title?: parameters["rowFilter.lists.title"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lists.id"];
          title?: parameters["rowFilter.lists.title"];
        };
        body: {
          /** lists */
          lists?: definitions["lists"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/add_list": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id: string;
            /** Format: text */
            title: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  lists_on_users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `lists.id`.<fk table='lists' column='id'/>
     */
    list_id: string;
    /** Format: timestamp without time zone */
    created_at?: string;
    /** Format: timestamp without time zone */
    updated_at?: string;
  };
  tasks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: text
     * @default
     */
    summary?: string;
    /**
     * Format: boolean
     * @default false
     */
    started: boolean;
    /**
     * Format: boolean
     * @default false
     */
    complete: boolean;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: string;
  };
  tasks_on_users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
     */
    task_id: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
  };
  subtasks: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
     */
    task_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  lists: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    title: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description lists_on_users */
  "body.lists_on_users": definitions["lists_on_users"];
  /** Format: uuid */
  "rowFilter.lists_on_users.user_id": string;
  /** Format: uuid */
  "rowFilter.lists_on_users.list_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.lists_on_users.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.lists_on_users.updated_at": string;
  /** @description tasks */
  "body.tasks": definitions["tasks"];
  /** Format: uuid */
  "rowFilter.tasks.id": string;
  /** Format: text */
  "rowFilter.tasks.summary": string;
  /** Format: boolean */
  "rowFilter.tasks.started": string;
  /** Format: boolean */
  "rowFilter.tasks.complete": string;
  /** Format: timestamp without time zone */
  "rowFilter.tasks.created_at": string;
  /** @description tasks_on_users */
  "body.tasks_on_users": definitions["tasks_on_users"];
  /** Format: uuid */
  "rowFilter.tasks_on_users.task_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.tasks_on_users.created_at": string;
  /** Format: uuid */
  "rowFilter.tasks_on_users.user_id": string;
  /** @description subtasks */
  "body.subtasks": definitions["subtasks"];
  /** Format: uuid */
  "rowFilter.subtasks.id": string;
  /** Format: uuid */
  "rowFilter.subtasks.task_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.subtasks.created_at": string;
  /** @description lists */
  "body.lists": definitions["lists"];
  /** Format: uuid */
  "rowFilter.lists.id": string;
  /** Format: text */
  "rowFilter.lists.title": string;
}

export interface operations {}

export interface external {}
